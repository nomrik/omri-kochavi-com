import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import moment from 'moment';

let _doc;

async function getDoc() {
    if (_doc) {
        return _doc;
    }

     // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
     const serviceAccountAuth = new JWT({
        // env var values here are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        email: process.env.CLIENT_EMAIL,
        key: process.env.PRIVATE_KEY.replace(/\\n/g, '\n'),
        scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });

    const doc = new GoogleSpreadsheet(process.env.SHEET_ID, serviceAccountAuth);
    await doc.loadInfo(); // loads document properties and worksheets
    _doc = doc;
    console.log('info loaded')
    return _doc;
}

export async function fetchAboutPage() {
    const doc = await getDoc();
    const sheet = doc.sheetsByTitle['About'];
    return await sheet.getRows();
}

export async function fetchWorks() {
    const doc = await getDoc();
    const sheet = doc.sheetsByTitle['Works'];
    const works = await sheet.getRows();

    const worksByCategory = {};

    works.sort((workA, workB) => moment(workA.get('year')).isAfter(workB.get('year')) ? -1 : 1);

    works.forEach(work => {
        const premiereDate = work.get('premiere_date') && moment(work.get('premiere_date'));
        let category = 'other';
        if (premiereDate && premiereDate.isAfter(moment())) {
            category = 'upcoming';
        } else if (work.get('category')) {
            category = work.get('category');
        }
        
        if (worksByCategory[category]) {
            worksByCategory[category].push(work);
        } else {
            worksByCategory[category] = [work];
        }
    })

    return worksByCategory;
}

export async function fetchEvents() {
    const doc = await getDoc();
    const sheet = doc.sheetsByTitle['Events'];
    if (!sheet) {
        return [];
    }
    const events = await sheet.getRows();

    events.sort((eventA, eventB) => moment(eventA.get('date')).isBefore(moment(eventB.get('date'))) ? 1 : -1);

    return events;
}

export function generateWorkLink(workTitle) {
    if (!workTitle) return null;
    return `/works#${workTitle.toLowerCase().replace(/\s+/g, '-')}`;
}